rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Match files uploaded by users for their orders
    // The path is: uploads/{userId}/{orderId}/{fileName}
    match /uploads/{userId}/{orderId}/{fileName} {
    
      // Allow a user to upload (create) a file only if they are the owner of the path.
      // This prevents a user from uploading files to another user's folder.
      // We also check file size and content type for security.
      allow create: if request.auth.uid == userId
                    && request.resource.size < 50 * 1024 * 1024 // Max 50MB
                    && request.resource.contentType.matches('application/pdf|image/.*|application/msword|application/vnd.openxmlformats-officedocument.wordprocessingml.document');

      // Admins can read/download any file.
      // A user can read/download their own file.
      allow read: if isAdmin() || request.auth.uid == userId;

      // Only admins should be able to update or delete files once uploaded.
      allow update, delete: if isAdmin();
    }

    // Match completed files uploaded by admins
    // The path is: completed/{orderId}/{fileName}
    match /completed/{orderId}/{fileName} {
        // Only admins can upload completed files
        allow write: if isAdmin();

        // Any authenticated user can read a completed file.
        // This assumes that the URL will only be shared with the user who owns the order.
        // For stricter security, you would match on /users/{userId}/orders/{orderId} and check ownership.
        allow read: if request.auth != null;
    }
  }
}
