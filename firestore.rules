rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants read access to a user's own profile and write access to admins only.
     * @path /users/{userId}
     * @allow (get) User A with id 'userA' can read their own profile: request.auth.uid == 'userA'
     * @allow (create) Admin user with id 'adminUser' can create a user profile. They must be an admin user as stored in /roles_admin/adminUser
     * @allow (update) Admin user with id 'adminUser' can update User A's profile. They must be an admin user as stored in /roles_admin/adminUser
     * @allow (delete) Admin user with id 'adminUser' can delete User A's profile. They must be an admin user as stored in /roles_admin/adminUser
     * @deny (get) User B with id 'userB' cannot read User A's profile: request.auth.uid != 'userA'
     * @deny (create) User A with id 'userA' cannot create a user profile. They are not an admin.
     * @deny (update) User A with id 'userA' cannot update their own profile. They are not an admin.
     * @deny (delete) User A with id 'userA' cannot delete their own profile. They are not an admin.
     * @principle Enforces document ownership for reads and admin-only writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants read/write access to a user's own orders and admin override.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User A with id 'userA' can create an order under their user ID if the order's studentId also matches 'userA'.
     * @allow (get) User A with id 'userA' can read their order with orderId 'order1'.
     * @allow (update) User A with id 'userA' can update their order with orderId 'order1'.
     * @allow (delete) User A with id 'userA' can delete their order with orderId 'order1'.
     * @allow (create) Admin user with id 'adminUser' can create an order under User A. They must be an admin user as stored in /roles_admin/adminUser
     * @allow (get) Admin user with id 'adminUser' can read User A's order. They must be an admin user as stored in /roles_admin/adminUser
     * @allow (update) Admin user with id 'adminUser' can update User A's order. They must be an admin user as stored in /roles_admin/adminUser
     * @allow (delete) Admin user with id 'adminUser' can delete User A's order. They must be an admin user as stored in /roles_admin/adminUser
     * @deny (create) User B with id 'userB' cannot create an order under User A's ID: request.auth.uid != 'userA' || request.resource.data.studentId != 'userA'
     * @deny (get) User B with id 'userB' cannot read User A's order.
     * @deny (update) User B with id 'userB' cannot update User A's order.
     * @deny (delete) User B with id 'userB' cannot delete User A's order.
     * @principle Enforces document ownership for writes and admin override.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && ((request.auth.uid == userId && request.resource.data.studentId == request.auth.uid) || isAdmin());
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    /**
     * @description Grants read/write access to analytics data to admins only.
     * @path /analytics/{analyticsId}
     * @allow (get) Admin user with id 'adminUser' can read analytics data. They must be an admin user as stored in /roles_admin/adminUser
     * @allow (create) Admin user with id 'adminUser' can create analytics data. They must be an admin user as stored in /roles_admin/adminUser
     * @allow (update) Admin user with id 'adminUser' can update analytics data. They must be an admin user as stored in /roles_admin/adminUser
     * @allow (delete) Admin user with id 'adminUser' can delete analytics data. They must be an admin user as stored in /roles_admin/adminUser
     * @deny (get) User A with id 'userA' cannot read analytics data.
     * @deny (create) User A with id 'userA' cannot create analytics data.
     * @deny (update) User A with id 'userA' cannot update analytics data.
     * @deny (delete) User A with id 'userA' cannot delete analytics data.
     * @principle Restricts analytics access to admins only.
     */
    match /analytics/{analyticsId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Grants admin privileges to users who have a document in this collection.
     * @path /roles_admin/{userId}
     * @allow (get) Admin user with id 'adminUser' can read their own admin role document.
     * @allow (create) Admin user with id 'adminUser' can create their own admin role document, effectively granting themselves admin privileges. This rule assumes an initial admin setup process.
     * @allow (update) No updates allowed.
     * @allow (delete) No deletes allowed.
     * @deny (get) Non-admin user with id 'userA' cannot read the admin role document.
     * @deny (create) Non-admin user with id 'userA' cannot create an admin role document.
     * @deny (update) No updates allowed.
     * @deny (delete) No deletes allowed.
     * @principle Controls admin role assignment.
     */
    match /roles_admin/{userId} {
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if false;
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if false;
        allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isAdmin() {
    return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }
}