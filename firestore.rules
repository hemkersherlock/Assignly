rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource, based on the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if a user is an admin by verifying the existence of their document in the /roles_admin collection.
      * @returns {boolean} True if the user is an admin, false otherwise.
      */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the current user is the owner of an existing resource.
     * @param {string} userId The user ID to compare against the resource's owner ID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines rules for the /users/{userId} collection.
     * @path /users/{userId}
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // Listing users is not allowed.
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines rules for the /users/{userId}/orders/{orderId} collection.
     * @path /users/{userId}/orders/{orderId}
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Defines rules for the /analytics/{analyticsId} collection.
     * @path /analytics/{analyticsId}
     */
    match /analytics/{analyticsId} {
      allow get: if isAdmin();
      allow list: if false;  // Listing analytics is disallowed.
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines rules for the /roles_admin/{userId} collection.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;  // Listing admins is disallowed.
        allow create: if isAdmin();
        allow update: if false; // Only create and delete operations should manage admin roles.
        allow delete: if isAdmin();
    }
  }
}