/**
 * @file Firebase Security Rules for Assignly Application
 * @description This ruleset enforces a strict user-ownership model with admin overrides for certain collections. Data validation is relaxed for prototyping.
 *
 * @dataStructure
 * - /users/{userId}: Stores individual user profiles.
 * - /users/{userId}/orders/{orderId}: Stores orders associated with a specific user.
 * - /analytics/{analyticsId}: Stores aggregated application analytics.
 * - /roles_admin/{userId}: Presence of a document grants admin privileges to the user.
 *
 * @keySecurityDecisions
 * - Users can only access their own user document and orders, unless they are an admin.
 * - Admin status is determined by the presence of a document in the `roles_admin` collection.
 * - Data validation is minimal for rapid prototyping.
 * - Public listing of users or analytics is disallowed.
 * - The `studentId` is denormalized in the `Order` entity to avoid extra reads for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the document.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user exists and is the owner.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data != null;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of an admin role document.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /***** USERS COLLECTION RULES *****/

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) User A can read their own profile: `auth.uid` is "userA"
     * @allow (create) User A can create their own profile: `auth.uid` is "userA"
     * @allow (update) Admin can update User A's profile: `auth.uid` is an admin.
     * @allow (delete) Admin can delete User A's profile: `auth.uid` is an admin.
     * @deny (get) User B cannot read User A's profile: `auth.uid` is "userB".
     * @deny (update) User A cannot update their own profile without admin rights.
     * @deny (delete) User A cannot delete their own profile without admin rights.
     * @principle Enforces document ownership for read and create, admin overrides for write.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // No public listing of users.
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /***** ORDERS SUBCOLLECTION RULES *****/

    /**
     * @description Controls access to order documents nested under a user.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get) User A can read their own order: `auth.uid` is "userA" and the order belongs to "userA".
     * @allow (create) User A can create an order for themselves: `auth.uid` is "userA" and `request.resource.data.studentId` is "userA".
     * @allow (update) Admin can update an order for User A: `auth.uid` is an admin.
     * @allow (delete) Admin can delete an order for User A: `auth.uid` is an admin.
     * @deny (get) User B cannot read User A's order: `auth.uid` is "userB".
     * @deny (create) User A cannot create an order for User B: `auth.uid` is "userA" but `request.resource.data.studentId` is "userB".
     * @deny (update) User A cannot update their own order without admin rights.
     * @deny (delete) User A cannot delete their own order without admin rights.
     * @principle Enforces document ownership for reads and creates, admin overrides for writes.  Validates studentId on create.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.studentId == request.auth.uid && request.auth.uid == userId;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /***** ANALYTICS COLLECTION RULES *****/

    /**
     * @description Controls access to analytics documents.
     * @path /analytics/{analyticsId}
     * @allow (get) Admin can read analytics data: `auth.uid` is an admin.
     * @allow (create) Admin can create analytics data: `auth.uid` is an admin.
     * @allow (update) Admin can update analytics data: `auth.uid` is an admin.
     * @allow (delete) Admin can delete analytics data: `auth.uid` is an admin.
     * @deny (get) User cannot read analytics data: `auth.uid` is a regular user.
     * @deny (create) User cannot create analytics data: `auth.uid` is a regular user.
     * @deny (update) User cannot update analytics data: `auth.uid` is a regular user.
     * @deny (delete) User cannot delete analytics data: `auth.uid` is a regular user.
     * @principle Restricts all access to admins only.
     */
    match /analytics/{analyticsId} {
      allow get: if isAdmin();
      allow list: if false; // No public listing of analytics.
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /***** ADMIN ROLES COLLECTION RULES *****/

    /**
     * @description Controls access to admin role documents.
     * @path /roles_admin/{userId}
     * @allow (get) Admin can read their own role: `auth.uid` is "userA".
     * @allow (create) Admin can create their own role: `auth.uid` is "userA".
     * @allow (update) No one is allowed to update the admin role.
     * @allow (delete) Only the admin can delete their role.
     * @deny (get) User B cannot read User A's admin role: `auth.uid` is "userB".
     * @deny (create) User A cannot create admin for another user.
     * @deny (update) No one can update the admin role.
     */
     match /roles_admin/{userId} {
        allow get: if isOwner(userId) || isAdmin();
        allow list: if false; // No public listing of admins.
        allow create: if isOwner(userId) && request.auth.uid == userId;
        allow update: if false;
        allow delete: if isOwner(userId);
     }
  }
}