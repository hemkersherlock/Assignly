rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their own document.
     * @allow (get, update, delete) User with matching ID can read, update, and delete their own document, or an admin can.
     * @deny (create) User cannot create a document with a different ID.
     * @deny (list) User cannot list all users.
     * @principle Enforces document ownership and restricts user listing for privacy.
     */
    match /users/{userId} {
      // Function to check if the requesting user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Function to check if the user has admin privileges
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      // Allow the user to create their own document (self-registration).
      allow create: if request.auth.uid == userId;

      // Allow the user to get their own document or an admin to get any document.
      allow get: if isOwner(userId) || isAdmin();

      // Allow the user to update their own document or an admin to update any document.
      allow update: if isOwner(userId) || isAdmin();

      // Allow the user to delete their own document or an admin to delete any document.
      allow delete: if isOwner(userId) || isAdmin();

      // Prevent listing of all users.
      allow list: if false;
    }

    /**
     * @description Controls access to order documents within a user's subcollection.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User with matching ID can create an order for themselves.
     * @allow (get, list, update, delete) User with matching ID can read, list, update, and delete their own orders, or an admin can.
     * @deny (create) User cannot create an order for a different user.
     * @principle Enforces document ownership and prevents unauthorized order management.
     */
    match /users/{userId}/orders/{orderId} {
      // Function to check if the requesting user is the owner of the order (matches studentId).
      function isOrderOwner(userId) {
        return request.auth.uid == userId;
      }

      // Allow the user to create an order for themselves.
      allow create: if request.auth.uid == userId;

      // Allow the user to get their own order or an admin to get any order.
      allow get: if isOrderOwner(userId) || isAdmin();

      // Allow the user to list their own orders or an admin to list all orders.
      allow list: if get(/databases/$(database)/documents/users/$(userId)).data.uid == request.auth.uid || isAdmin();

      // Allow the user to update their own order or an admin to update any order.
      allow update: if isOrderOwner(userId) || isAdmin();

      // Allow the user to delete their own order or an admin to delete any order.
      allow delete: if isOrderOwner(userId) || isAdmin();
    }

    /**
     * @description Controls access to analytics documents.
     * @path /analytics/{analyticsId}
     * @allow (get, list, create, update, delete) Only admins can read, list, create, update, and delete analytics data.
     * @deny (get, list, create, update, delete) Non-admins cannot access analytics data.
     * @principle Restricts analytics data management to authorized personnel.
     */
    match /analytics/{analyticsId} {
      // Allow only admins to get analytics data.
      allow get: if isAdmin();

      // Allow only admins to list analytics data.
      allow list: if isAdmin();

      // Allow only admins to create analytics data.
      allow create: if isAdmin();

      // Allow only admins to update analytics data.
      allow update: if isAdmin();

      // Allow only admins to delete analytics data.
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to admin role documents.
     * @path /roles_admin/{userId}
     * @allow (create) Only the user with matching ID can create their own document.
     * @allow (get) Only the user with matching ID can read their own document.
     * @deny (list, update, delete) No listing, updating, or deleting of admin roles is allowed via the client.
     * @principle Enforces document ownership and restricts modification of admin roles via client.
     */
    match /roles_admin/{userId} {
      // Function to check if the requesting user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       // Allow the user to create their own admin role document if they have the same user ID.
      allow create: if request.auth.uid == userId;

      // Allow the user to read their own admin role document if they have the same user ID.
      allow get: if isOwner(userId);

      // Deny the listing of all admin role documents.
      allow list: if false;

      // Deny updates to the admin role documents
      allow update: if false;

      // Deny deletion of admin role documents
      allow delete: if false;
    }
  }
}