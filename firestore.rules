/**
 * @description This ruleset enforces a strict user-ownership model for user data and orders,
 *              with admin override capabilities. Analytics data is restricted to admins only.
 * @dataStructure
 *  - /users/{userId}: Stores user profiles. Only the user or an admin can read. Only admins can update or delete.
 *  - /users/{userId}/orders/{orderId}: Stores orders for each user. Only the user can create orders for themselves.
 *  - /analytics/{analyticsId}: Stores global analytics data. Only admins can read or write.
 *  - /roles_admin/{userId}: Indicates if a user is an admin. Existence of this document grants admin privileges.
 * @keySecurityDecisions
 *  - Users can only read their own profile data, unless an admin.
 *  - Only admins can create, update, or delete user profiles.
 *  - Users can only create orders under their own user ID.
 *  - Listing user documents is disallowed for security.
 *  - Analytics data is completely restricted to admins.
 * @denormalizationForAuthorization
 *  - Orders include a denormalized 'studentId' field, allowing security rules to validate order creation requests
 *    against the authenticated user's ID without additional 'get()' operations.
 * @structuralSegregation
 *  - User-specific data (users and orders) is structurally segregated from global data (analytics).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) User 'user123' can read their own profile.
     * @allow (create) User 'user123' can create their own profile when signing up.
     * @allow (update) Admin can update user 'user123' profile.
     * @allow (delete) Admin can delete user 'user123' profile.
     * @deny (get) User 'user456' cannot read user 'user123' profile.
     * @deny (create) User 'user456' cannot create user 'user123' profile.
     * @principle Enforces document ownership and admin override for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow list: if false;

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to orders for a specific user.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get) User 'user123' can read order 'order456' if they own it.
     * @allow (create) User 'user123' can create a new order under their user ID.
     * @deny (get) User 'user456' cannot read order 'order456' under user 'user123'.
     * @deny (create) User 'user123' cannot create order 'order456' under user 'user456'
     * @principle Enforces document ownership and validates creator ID on creation.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.studentId == userId;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to analytics data.
     * @path /analytics/{analyticsId}
     * @allow (get) Admin can read analytics data.
     * @allow (create) Admin can create analytics data.
     * @allow (update) Admin can update analytics data.
     * @allow (delete) Admin can delete analytics data.
     * @deny (get) User cannot read analytics data.
     * @deny (create) User cannot create analytics data.
     * @principle Restricts all access to admins only.
     */
    match /analytics/{analyticsId} {
      allow get: if isAdmin();
      allow list: if isAdmin();

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
      * @description Controls access to admin role documents.
      * @path /roles_admin/{userId}
      * @allow get: if isAdmin();
      * @allow create: if false;
      * @allow update: if false;
      * @allow delete: if isAdmin();
      * @allow list: if false;
      * @principle Restricts all access to admins only.
      */
    match /roles_admin/{userId} {
       allow get: if isAdmin();
       allow list: if false;
       allow create: if false;
       allow update: if false;
       allow delete: if isAdmin();
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}