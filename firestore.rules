rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages admin role checks.  If a document exists at this path, the user is an admin.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
        // Admins can read the documents
        allow get: if isSignedIn();
        allow list: if false; // Prevent listing of all admins

        // Only admins can create/update/delete admin role assignments
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to user documents. Only the user or an admin can read. Only admins can write.
     * @path /users/{userId}
     * @allow (get) User A (auth: A, userId: A) can read their own user document.
     * @allow (create) Admin (auth: B, userId: B, isAdmin: true) can create a user document for User A (userId: A).
     * @deny (get) User A (auth: B, userId: A) cannot read User B's user document.
     * @deny (create) User A (auth: A, userId: A) cannot create a user document for User B (userId: B).
     * @principle Enforces document ownership for reads and restricts writes to admins only.
     */
    match /users/{userId} {
      // Allow the user to read their own document, or an admin to read any user document.
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false; // Listing all users is not permitted

      // Allow creation of a user document only if the user ID matches the authenticated user ID
      // or if the user is an admin.
      allow create: if isSignedIn() && isOwner(userId);

      // Allow updates and deletes only by admins.
      allow update, delete: if isAdmin();
    }

    /**
     * @description Controls access to order documents within a user's subcollection.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get) User A (auth: A, userId: A) can read their own order document.
     * @allow (create) User A (auth: A, userId: A) can create an order document under their user document.
     * @deny (get) User A (auth: B, userId: A) cannot read an order document under User B's user document.
     * @deny (create) User A (auth: A, userId: A) cannot create an order document under User B's user document.
     * @principle Enforces document ownership for reads and writes within the user's order subcollection.
     */
    match /users/{userId}/orders/{orderId} {
      // Allow reading order documents if the user is the owner or an admin.
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;

      // Allow creation if the user is signed in, the studentId matches the authenticated user's ID,
      // and the userId in the path also matches.
      allow create: if isSignedIn() && request.resource.data.studentId == request.auth.uid && userId == request.auth.uid;

      // Allow updates and deletes only by admins.  Ensure the document exists first!
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to analytics documents. Only admins can read and write.
     * @path /analytics/{analyticsId}
     * @allow (get) Admin (auth: A, isAdmin: true) can read analytics data.
     * @allow (create) Admin (auth: A, isAdmin: true) can create analytics data.
     * @deny (get) User A (auth: A, isAdmin: false) cannot read analytics data.
     * @deny (create) User A (auth: A, isAdmin: false) cannot create analytics data.
     * @principle Restricts all access to analytics data to admin users.
     */
    match /analytics/{analyticsId} {
      // Allow reads only by admins.
      allow get: if isAdmin();
      allow list: if isAdmin();

      // Allow writes only by admins.
      allow create, update, delete: if isAdmin();
    }
  }

  // Helper functions

  /**
   * @description Checks if the user is signed in.
   * @return True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the user ID matches the authenticated user's ID.
   * @param {string} userId The user ID to check.
   * @return True if the user ID matches the authenticated user's ID, false otherwise.
   */
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  /**
   * @description Checks if the user is an admin by verifying the existence of a document in /roles_admin/{uid}.
   * @return True if the user is an admin, false otherwise.
   */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
}