/**
 * @fileoverview Firestore Security Rules for Assignly application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user data and orders,
 * combined with role-based access control for administrative functions and analytics.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the user and admins can read. Only admins can write.
 * - /users/{userId}/orders/{orderId}: Stores orders placed by users.  Enforces user ownership.
 * - /analytics/{analyticsId}: Stores analytics data. Only admins can read and write.
 * - /roles_admin/{userId}: Presence of a document grants admin privileges.
 *
 * Key Security Decisions:
 * - Users can only read their own profile data.
 * - Only admins can create, update, or delete user profiles.
 * - Users can create orders under their own profile.
 * - Users can only read their own orders.
 * - Only admins can read and write analytics data.
 * - Data validation is relaxed in this prototype to enable rapid iteration.  Only authorization-critical fields are validated.
 * - Denormalization: Orders contain the `studentId` field to allow for authorization checks without extra reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get) User with matching UID can read their profile.
     * @allow (get) Admin can read any user profile.
     * @allow (list) Admin can list all user profiles.
     * @allow (create) Admins can create user profiles. The 'id' field in the created document must match the {userId} in the path.
     * @allow (update) Admins can update user profiles.
     * @allow (delete) Admins can delete user profiles.
     * @deny  (get) Non-matching user cannot read the profile.
     * @deny (list) Non-admin users cannot list profiles.
     * @deny (create) Non-admin users cannot create profiles.
     * @deny (update) Non-admin users cannot update profiles.
     * @deny (delete) Non-admin users cannot delete profiles.
     * @principle Enforces user-ownership for reads and admin-only access for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isAdmin();
      allow create: if isAdmin() && request.resource.data.id == userId;
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to orders placed by a specific user.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get) User with matching UID can read their orders.
     * @allow (list) User with matching UID can list their orders.
     * @allow (create) User with matching UID can create orders under their profile. The 'studentId' field in the created document must match the {userId} in the path.
     * @allow (update) User with matching UID can update their orders.
     * @allow (delete) User with matching UID can delete their orders.
     * @deny (get) Non-matching user cannot read the order.
     * @deny (list) Non-matching user cannot list the order.
     * @deny (create) Non-matching user cannot create orders under someone else's profile.
     * @deny (update) Non-matching user cannot update the order.
     * @deny (delete) Non-matching user cannot delete the order.
     * @principle Enforces user-ownership for order management and creation.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.studentId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to analytics data.
     * @path /analytics/{analyticsId}
     * @allow (get) Admins can read analytics data.
     * @allow (list) Admins can list analytics data.
     * @allow (create) Admins can create analytics data.
     * @allow (update) Admins can update analytics data.
     * @allow (delete) Admins can delete analytics data.
     * @deny (get) Non-admins cannot read analytics data.
     * @deny (list) Non-admins cannot list analytics data.
     * @deny (create) Non-admins cannot create analytics data.
     * @deny (update) Non-admins cannot update analytics data.
     * @deny (delete) Non-admins cannot delete analytics data.
     * @principle Restricts analytics data access to administrators only.
     */
    match /analytics/{analyticsId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Determines if a user has admin privileges. The existence of a document grants admin rights.
     * @path /roles_admin/{userId}
     * @allow (get) Admins can check if other users are admins.
     * @allow (list) Deny listing all admin roles.
     * @allow (create) Only accessible via backend functions
     * @allow (update) Only accessible via backend functions
     * @allow (delete) Only accessible via backend functions
     * @principle Admin role is granted by the presence of a document in this collection.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}