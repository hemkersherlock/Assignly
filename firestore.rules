/**
 * @file Firebase Security Rules for Assignly Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user data and orders,
 * with administrative override capabilities. It also restricts access to analytics
 * data to admin users only. The rules are designed to prevent unauthorized
 * data access and modification.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /users/{userId}/orders/{orderId}: Stores orders associated with a specific user.
 * - /analytics/{analyticsId}: Stores application-wide analytics data.
 * - /roles_admin/{userId}: Indicates admin privileges for a user. The existence of
 *   a document in this collection grants admin rights.
 *
 * Key Security Decisions:
 * - Users can only read/write their own user documents.
 * - Orders can only be created under a user's own document.
 * - Only admins can manage user documents and analytics data.
 * - Listing of users is disallowed.
 *
 * Denormalization for Authorization:
 * The 'Order' entity includes a 'studentId' field, denormalized from the user document.
 * This allows security rules to validate order creation requests against the
 * authenticated user's ID without requiring a 'get()' operation, improving efficiency
 * and security.
 *
 * Structural Segregation:
 * User-specific data (users and orders) is separated from global data (analytics)
 * to simplify security rules and ensure a consistent security posture for each collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is authenticated.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of a document.
     *              Combines ownership check with document existence check.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

     /**
      * @description Checks if the requesting user is an admin.
      * @return {boolean} True if the user is an admin, false otherwise.
      */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }


    /**
     * @description Defines rules for the /users/{userId} collection.
     * @path /users/{userId}
     */
    match /users/{userId} {
      // Read Rules
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // Disallow listing of all users.

      // Write Rules
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin(); // Only admins can update other users. The userId immutable after creation
      allow delete: if isAdmin(); // Only admins can delete other users.
    }

    /**
     * @description Defines rules for the /users/{userId}/orders/{orderId} subcollection.
     * @path /users/{userId}/orders/{orderId}
     */
    match /users/{userId}/orders/{orderId} {
      // Read Rules
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin(); // Allow the owner and admins to list orders

      // Write Rules
      allow create: if isOwner(userId) && request.resource.data.studentId == userId;
      allow update: if isOwner(userId) || isAdmin(); // Admin can update any order, but ensure it exists
      allow delete: if isAdmin(); // Admin can delete any order, but ensure it exists.
    }

    /**
     * @description Defines rules for the /analytics/{analyticsId} collection.
     * @path /analytics/{analyticsId}
     */
    match /analytics/{analyticsId} {
      // Read Rules
      allow get: if isAdmin();
      allow list: if isAdmin();

      // Write Rules
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

      /**
       * @description Defines rules for the /roles_admin/{userId} collection.
       * @path /roles_admin/{userId}
       */
    match /roles_admin/{userId} {
      // Read Rules
      allow get: if isAdmin();
      allow list: if false;

      // Write Rules - Only server can modify admin roles
      allow create: if false; // Only server can create admin roles
      allow update: if false; // Only server can update admin roles
      allow delete: if false; // Only server can delete admin roles
    }
  }
}