rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @principle Verified Identity: All authorization decisions must rely on `request.auth` as the source of truth.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource, based on the userId.
     * @principle Ownership: Uses for paths like `/users/{userId}/...`.
     * @param userId The user ID to compare against the authenticated user's UID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an admin, by verifying the existence of a document in the `/roles_admin/{userId}` collection.
     * @principle Roles: Used if the IR specifies global admin roles or similar database-wide needs.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Applies to user documents.
     * @path /users/{userId}
     * @allow (get) If the user is signed in and is the owner of the document.
     * @deny (get) If the user is not signed in or is not the owner of the document.
     * @allow (create) If the user is signed in and the userId matches the authenticated user's UID.
     * @deny (create) If the user is not signed in or the userId does not match the authenticated user's UID.
     * @allow (update, delete) If the user is an admin.
     * @deny (update, delete) If the user is not an admin.
     * @principle Enforces document ownership for reads and admin-only access for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Applies to order documents within a user's subcollection.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get) If the user is signed in and is either the owner or an admin.
     * @deny (get) If the user is not signed in and is not the owner or an admin.
     * @allow (create) If the user is signed in, the userId matches the authenticated user's UID.
     * @deny (create) If the user is not signed in, or the userId does not match the authenticated user's UID.
     * @allow (update, delete) If the user is an admin.
     * @deny (update, delete) If the user is not an admin.
     * @principle Enforces user-ownership for read and create, and admin-only access for update and delete.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Applies to analytics documents.
     * @path /analytics/{analyticsId}
     * @allow (read, write) If the user is an admin.
     * @deny (read, write) If the user is not an admin.
     * @principle Restricts analytics data access to admins only.
     */
    match /analytics/{analyticsId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Applies to admin role documents.
     * @path /roles_admin/{userId}
     * @allow (get) If the user is signed in.
     * @deny (get) If the user is not signed in.
     * @allow (create) If the user is signed in and the userId matches the authenticated user's UID.
     * @deny (create) If the user is not signed in, or the userId does not match the authenticated user's UID.
     * @allow (update) If false (no updates allowed).
     * @deny (update) Always.
     * @allow (delete) If the userId matches the authenticated user's UID.
     * @deny (delete) If the userId does not match the authenticated user's UID.
     * @principle Allows self-creation and deletion of admin role assignments, but no updates.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if false;
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}