rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user or an admin can read. Only admins can write.
     * @path /users/{userId}
     * @allow (get) User with ID 'user123' can read their own profile.
     *          request.auth.uid == 'user123'
     * @allow (list) Admin user 'admin456' can list all users (if list was enabled) with existing document in /roles_admin/admin456.
     * @allow (create) Admin user 'admin456' can create users with existing document in /roles_admin/admin456.
     * @allow (update) Admin user 'admin456' can update users with existing document in /roles_admin/admin456.
     * @allow (delete) Admin user 'admin456' can delete users with existing document in /roles_admin/admin456.
     * @deny (get) User 'user456' cannot read profile of user 'user123'.
     *          request.auth.uid == 'user456'
     * @deny (create) Regular user 'user123' cannot create new user profiles.
     *          request.auth.uid == 'user123'
     * @deny (update) Regular user 'user123' cannot update other user profiles.
     *          request.auth.uid == 'user123'
     * @deny (delete) Regular user 'user123' cannot delete other user profiles.
     *          request.auth.uid == 'user123'
     * @principle Enforces user-level and admin-level access control for user profiles.
     */
    match /users/{userId} {
      // Read Permissions
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false; // Listing users is not permitted.

      // Write Permissions
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Secure orders for a specific user. Only the user or an admin can read and write.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get) User 'user123' can read their own order 'order456'.
     *          request.auth.uid == 'user123'
     * @allow (list) User 'user123' can list their own orders.
     *          request.auth.uid == 'user123'
     * @allow (create) User 'user123' can create an order with studentId matching their own ID.
     *          request.auth.uid == 'user123' && request.resource.data.studentId == 'user123'
     * @allow (update) User 'user123' can update their own order 'order456' with existing document.
     *          request.auth.uid == 'user123'
     * @allow (delete) User 'user123' can delete their own order 'order456' with existing document.
     *          request.auth.uid == 'user123'
     * @deny (get) User 'user456' cannot read order 'order456' that belongs to user 'user123'.
     *          request.auth.uid == 'user456'
     * @deny (create) User 'user123' cannot create an order with studentId not matching their own ID.
     *          request.auth.uid == 'user123' && request.resource.data.studentId == 'userXXX'
     * @deny (update) User 'user123' cannot update other user orders 'order456' with existing document.
     *          request.auth.uid == 'userXXX'
     * @deny (delete) User 'user123' cannot delete other user orders 'order456' with existing document.
     *          request.auth.uid == 'userXXX'
     * @principle Enforces user-level and admin-level access control for orders.
     */
    match /users/{userId}/orders/{orderId} {
      // Read Permissions
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isSignedIn() && (isOwner(userId) || isAdmin());

      // Write Permissions
      allow create: if isSignedIn() && (request.resource.data.studentId == request.auth.uid || isAdmin());
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    /**
     * @description Secure analytics data. Only admins can read and write.
     * @path /analytics/{analyticsId}
     * @allow (get) Admin user 'admin456' can read analytics data with existing document in /roles_admin/admin456.
     * @allow (list) Admin user 'admin456' can list analytics data with existing document in /roles_admin/admin456.
     * @allow (create) Admin user 'admin456' can create analytics data with existing document in /roles_admin/admin456.
     * @allow (update) Admin user 'admin456' can update analytics data with existing document in /roles_admin/admin456.
     * @allow (delete) Admin user 'admin456' can delete analytics data with existing document in /roles_admin/admin456.
     * @deny (get) Regular user 'user123' cannot read analytics data.
     *          request.auth.uid == 'user123'
     * @deny (create) Regular user 'user123' cannot create analytics data.
     *          request.auth.uid == 'user123'
     * @deny (update) Regular user 'user123' cannot update analytics data.
     *          request.auth.uid == 'user123'
     * @deny (delete) Regular user 'user123' cannot delete analytics data.
     *          request.auth.uid == 'user123'
     * @principle Restricts access to analytics data to administrators only.
     */
    match /analytics/{analyticsId} {
      // Read Permissions
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();

      // Write Permissions
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Secure admin role. Existence of document grants admin privileges.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();

      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isAdmin() {
    return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }
}