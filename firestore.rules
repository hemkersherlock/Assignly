rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is an admin.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (get) User YHB56u939CWoIXqi7VhqbA0Wsxo1 can get their own user document.
     * @allow (get) An admin can get any user document.
     * @deny (get) User ABC cannot get user document of YHB56u939CWoIXqi7VhqbA0Wsxo1.
     * @allow (create) User YHB56u939CWoIXqi7VhqbA0Wsxo1 can create their own user document.
     * @deny (create) User ABC cannot create user document for YHB56u939CWoIXqi7VhqbA0Wsxo1.
     * @allow (update) An admin can update any user document.
     * @deny (update) User YHB56u939CWoIXqi7VhqbA0Wsxo1 cannot update their own user document.
     * @principle Enforces document ownership for reads and admin-only for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false; // Disallow listing of user documents.
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for the /users/{userId}/orders/{orderId} collection.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get) User YHB56u939CWoIXqi7VhqbA0Wsxo1 can get their own order.
     * @allow (get) An admin can get any order.
     * @deny (get) User ABC cannot get order of YHB56u939CWoIXqi7VhqbA0Wsxo1.
     * @allow (list) User YHB56u939CWoIXqi7VhqbA0Wsxo1 can list their own orders.
     * @allow (list) An admin can list any orders.
     * @deny (list) User ABC cannot list orders of YHB56u939CWoIXqi7VhqbA0Wsxo1.
     * @allow (create) User YHB56u939CWoIXqi7VhqbA0Wsxo1 can create an order for themself.
     * @deny (create) User ABC cannot create order for YHB56u939CWoIXqi7VhqbA0Wsxo1.
     * @allow (update) An admin can update any order.
     * @deny (update) User YHB56u939CWoIXqi7VhqbA0Wsxo1 cannot update their own order.
     * @principle Enforces document ownership for reads and creates, and admin-only for writes.
     */
    match /users/{userId}/orders/{orderId} {
        allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
        allow list: if isSignedIn() && (isOwner(userId) || isAdmin());
        allow create: if isSignedIn() && request.auth.uid == userId;
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for the /analytics/{analyticsId} collection.
     * @path /analytics/{analyticsId}
     * @allow (get) An admin can get any analytics document.
     * @deny (get) User YHB56u939CWoIXqi7VhqbA0Wsxo1 cannot get any analytics document.
     * @allow (create) An admin can create an analytics document.
     * @deny (create) User YHB56u939CWoIXqi7VhqbA0Wsxo1 cannot create any analytics document.
     * @allow (update) An admin can update any analytics document.
     * @deny (update) User YHB56u939CWoIXqi7VhqbA0Wsxo1 cannot update any analytics document.
     * @principle Restricts access to analytics data to admins only.
     */
    match /analytics/{analyticsId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if false; // Listing is disallowed for security and performance reasons.
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for the /roles_admin/{userId} collection.
     * @path /roles_admin/{userId}
     * @allow (get) An admin can check if another user is also an admin.
     * @deny (get) User YHB56u939CWoIXqi7VhqbA0Wsxo1 cannot check if another user is an admin.
     * @allow (create) An admin can grant admin privileges to another user.
     * @deny (create) User YHB56u939CWoIXqi7VhqbA0Wsxo1 cannot grant admin privileges to another user.
     * @allow (update) An admin can modify an existing admin document (e.g., update roles).
     * @deny (update) User YHB56u939CWoIXqi7VhqbA0Wsxo1 cannot modify an existing admin document.
     * @principle Admin-only access for managing admin roles.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}