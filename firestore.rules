/**
 * @file Overview
 * This ruleset enforces a strict user-ownership model for users and their associated orders,
 * with administrative overrides for user management and analytics.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/orders/{orderId}: Stores orders associated with a specific user.
 * - /analytics/{analyticsId}: Stores global application analytics.
 * - /roles_admin/{userId}: Indicates admin status for a user.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Users can only read/write their own orders.
 * - Only admins can create/update/delete user profiles.
 * - Only admins can read/write analytics data.
 * - Listing all users is disallowed.
 * - `roles_admin` collection acts as a simple admin role management system.
 *
 * Denormalization for Authorization:
 * - Orders store `studentId` to allow direct validation of ownership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (get) User with UID 'userId' can read their own profile.
     * @allow (create) Admin user can create user profiles.
     * @deny (get) User with UID 'otherUserId' cannot read another user's profile.
     * @deny (update) Non-admin user cannot update a user profile.
     * @principle Enforces document ownership for reads and restricts writes to admins.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // Disallow listing all users.

      allow create: if isSignedIn() && request.auth.uid == request.resource.data.id; // User self-creation.
      allow update: if isOwner(userId);
      allow delete: if false; // Disable user deletion

    }

    /**
     * @description Controls access to orders within a user's profile.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get) User with UID 'userId' can read their own order.
     * @allow (create) User with UID 'userId' can create an order under their profile.
     * @deny (get) User with UID 'otherUserId' cannot read another user's order.
     * @deny (update) Non-owner cannot update an order.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }


      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.studentId == request.auth.uid; // Validate studentId on create.
      allow update: if isExistingOwner(userId) && request.resource.data.studentId == resource.data.studentId; // Ensure studentId is immutable
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to analytics data.
     * @path /analytics/{analyticsId}
     * @allow (get) Admin user can read analytics.
     * @allow (create) Admin user can create analytics data.
     * @deny (get) Non-admin user cannot read analytics.
     * @deny (update) Non-admin user cannot update analytics.
     * @principle Restricts all access to admins.
     */
    match /analytics/{analyticsId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if isAdmin();

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if false; // Disable analytics deletion.
    }

     /**
      * @description Controls access to admin roles.
      * @path /roles_admin/{userId}
      */
     match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if false; // Disable listing admins.

      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }
  }
}