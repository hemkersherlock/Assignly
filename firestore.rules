rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) User with matching {userId} can read their own profile.
     * @allow (get) Admin can read any user profile.
     * @deny (get) User trying to read another user's profile.
     * @allow (create) User can create their profile if the userId matches their auth.uid.
     * @deny (create) User attempting to create a profile with a mismatched userId.
     * @allow (update) Only admins can update user profiles.
     * @allow (delete) Only admins can delete user profiles.
     * @principle Enforces user-ownership for reads and admin-only access for writes.
     */
    match /users/{userId} {
      // Allow the user to read their own profile, or an admin to read any profile.
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;

      // Allow user to create their own profile, but only if the userId matches their auth.uid.
      allow create: if isSignedIn() && isOwner(userId);

      // Only admins can update or delete user profiles.
      allow update, delete: if isAdmin();
    }

    /**
     * @description Controls access to order documents within a user's subcollection.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get) User with matching {userId} can read their own order.
     * @allow (get) Admin can read any order.
     * @deny (get) User trying to read another user's order.
     * @allow (create) User can create an order in their own subcollection. `studentId` must match the authenticated user's ID.
     * @deny (create) User attempting to create an order with a mismatched `studentId`.
     * @allow (update) User can update their own order.
     * @allow (delete) User can delete their own order.
     * @principle Enforces user-ownership for orders, with admin overrides.  Validates studentId on create.
     */
    match /users/{userId}/orders/{orderId} {
      // Allow the user to read their own order, or an admin to read any order.
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;

      // Allow user to create an order if studentId matches their auth.uid.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.studentId == request.auth.uid;

      // Allow user to update or delete their own order.
      allow update, delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to analytics documents.
     * @path /analytics/{analyticsId}
     * @allow (get) Only admins can read analytics data.
     * @allow (create) Only admins can create analytics data.
     * @allow (update) Only admins can update analytics data.
     * @allow (delete) Only admins can delete analytics data.
     * @principle Restricts analytics data access to administrators.
     */
    match /analytics/{analyticsId} {
      // Only admins can read, create, update, or delete analytics data.
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to admin role documents.
     * @path /roles_admin/{userId}
     * @allow (get) Only admins can check for other admins.
     * @allow (create) Only admins can create new admin roles.
     * @allow (update) Only admins can update admin roles.
     * @allow (delete) Only admins can delete admin roles.
     */
    match /roles_admin/{userId} {
      allow get, list, create, update, delete: if isAdmin();
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document based on the userId.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is an admin.
  function isAdmin() {
    return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }
}