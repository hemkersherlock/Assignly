/**
 * @description This ruleset enforces a strict user-ownership model for user data and orders, with admin overrides. Analytics data is restricted to admin access only.
 * @dataStructure
 *   /users/{userId}: Stores user profiles. Only the user themselves or an admin can read profiles. Only admins can create/update/delete user profiles.
 *   /users/{userId}/orders/{orderId}: Stores orders associated with a specific user. Only the user who owns the order can read/write order data.
 *   /analytics/{analyticsId}: Stores application analytics data. Only admins can read/write analytics data.
 *   /roles_admin/{userId}: Presence of a document grants the user admin privileges.
 * @keySecurityDecisions
 *   - Users cannot list other users.
 *   - Orders are owned by users, and ownership is validated using the `studentId` field within each order document for authorization independence.
 *   - Analytics data is globally accessible but only modifiable by admins.
 * @denormalizationForAuthorization
 *   - Orders include a `studentId` field to allow security rules to validate order creation requests against the authenticated user's ID without needing to perform a `get()` operation to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get) - Authenticated user can read their own profile if the userId matches their auth UID. An admin can also read any user profile.
     * @allow (update, delete) - Only admins can update or delete user profiles.
     * @deny (create) - User attempts to create a profile with an ID different from their auth UID.
     * @deny (get) - User attempts to read another user's profile without admin privileges.
     * @principle Enforces user-ownership and admin-override for user profiles.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow update, delete: if isAdmin();
      allow list: if false;
    }

    /**
     * @description Controls access to order data for a specific user.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) - Authenticated user can create an order if the 'studentId' in the request matches their auth UID.
     * @allow (get, list) - Authenticated user can read and list their own orders if the userId matches their auth UID.
     * @allow (update, delete) - Authenticated user can update or delete their own order if they are the owner and the order exists.
     * @deny (create) - User attempts to create an order with a 'studentId' that does not match their auth UID.
     * @deny (get, list) - User attempts to read or list orders for a different user.
     * @principle Enforces user-ownership for orders, with authorization independence achieved via the 'studentId' field.
     */
    match /users/{userId}/orders/{orderId} {
      allow create: if isSignedIn() && request.resource.data.studentId == request.auth.uid;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to analytics data.
     * @path /analytics/{analyticsId}
     * @allow (get, list) - Admins can read and list analytics data.
     * @allow (create, update, delete) - Admins can create, update, and delete analytics data.
     * @deny (get, list, create, update, delete) - Non-admins are denied access to analytics data.
     * @principle Restricts access to analytics data to admins only.
     */
    match /analytics/{analyticsId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to admin role documents. The existence of a document in this collection grants admin privileges to the user.
     * @path /roles_admin/{userId}
     * @allow (get, list) - Only admins can read/list this collection.
     * @allow (create, update, delete) - Only admins can create/update/delete entries.
     * @principle Grants admin privileges based on document existence in this collection.
     */
    match /roles_admin/{userId} {
        allow get, list: if isAdmin();
        allow create, update, delete: if isAdmin();
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}