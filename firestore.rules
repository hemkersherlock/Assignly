/**
 * @file Firebase Security Rules for Assignly Firestore Database
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles and their associated orders.
 *   Analytics data is publicly readable but only writable by authorized functions.
 * @data_structure
 *   - `/users/{userId}`: Stores user profile data. Only the authenticated user with matching `userId` can read or write their own profile.
 *   - `/users/{userId}/orders/{orderId}`: Stores orders placed by each user. Only the authenticated user with matching `userId` can access their own orders.
 *   - `/analytics/{analyticsId}`: Stores application analytics. Data is publicly readable but writes are not permitted through the client-side rules.
 * @key_security_decisions
 *   - User listing is disallowed to protect user privacy.
 *   - All write operations are protected by authorization checks to prevent unauthorized data modification.
 *   - Public read access is granted for analytics data to enable public dashboards and reporting.
 * @denormalization_for_authorization
 *   - Orders are stored as subcollections of users to enforce user-specific access control via path-based rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines a function to check if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines a function to check if the authenticated user's ID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines a function to check if the authenticated user is the owner of an existing document.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && resource.data.id == request.auth.uid;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - User with auth UID 'user123' can create a document at /users/user123.
     * @allow (get) - User with auth UID 'user123' can read the document at /users/user123.
     * @allow (update) - User with auth UID 'user123' can update the document at /users/user123.
     * @allow (delete) - User with auth UID 'user123' can delete the document at /users/user123.
     * @deny (create) - User with auth UID 'user456' cannot create a document at /users/user123.
     * @deny (get) - User with auth UID 'user456' cannot read the document at /users/user123.
     * @deny (update) - User with auth UID 'user456' cannot update the document at /users/user123.
     * @deny (delete) - User with auth UID 'user456' cannot delete the document at /users/user123.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/orders/{orderId} collection.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) - User with auth UID 'user123' can create a document at /users/user123/orders/order456.
     * @allow (get) - User with auth UID 'user123' can read the document at /users/user123/orders/order456.
     * @allow (update) - User with auth UID 'user123' can update the document at /users/user123/orders/order456.
     * @allow (delete) - User with auth UID 'user123' can delete the document at /users/user123/orders/order456.
     * @deny (create) - User with auth UID 'user456' cannot create a document at /users/user123/orders/order456.
     * @deny (get) - User with auth UID 'user456' cannot read the document at /users/user123/orders/order456.
     * @deny (update) - User with auth UID 'user456' cannot update the document at /users/user123/orders/order456.
     * @deny (delete) - User with auth UID 'user456' cannot delete the document at /users/user123/orders/order456.
     * @principle Enforces document ownership for writes and restricts access to a user's own orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /analytics/{analyticsId} collection.
     * @path /analytics/{analyticsId}
     * @allow (get, list) - Any user can read analytics data.
     * @deny (create, update, delete) - No user can create, update, or delete analytics data.
     * @principle Public read access with no write access through client rules.
     */
    match /analytics/{analyticsId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}